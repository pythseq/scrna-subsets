
''' rules to demultiplex and trim scRNA-Seq data '''
rule append_umi:
  input:
    fq1 = '{projects}/fastq/demultiplexed/R1/{cell}.fastq.gz',
    fq2 = '{projects}/fastq/demultiplexed/R2/{cell}_trimmed.fastq.gz',
  output:
    '{projects}/fastq/demultiplexed/R2/{cell}_trimmed_umi.fastq.gz',
  params:
    job_name = "{projects}.appendumis",
    memory = "select[mem>20] rusage[mem=20]",
  log:
    '{projects}/fastq/demultiplexed/R2/log/umi/{cell}.txt'
  shell:
    " python3 {BIN}/umi_to_fqname.py -f1 {input.fq1} -f2 {input.fq2} "
    " -u NNNNNNNNNNTTTTT | gzip > {output}"
 

rule cutadapt:
  input:
    "{projects}/fastq/demultiplexed/R2/{cell}.fastq.gz"
  output:
    "{projects}/fastq/demultiplexed/R2/{cell}_trimmed.fastq.gz"
  params:
    job_name = '{projects}_demultiplex',
    memory =  "select[mem>4] rusage[mem=4] "
  log:
    "{projects}/fastq/demultiplexed/R2/logs/{cell}.txt"
  shell:
    "cutadapt -u -25 -a 'A{{100}}' -m 20 -o {output} {input} > {log}"

rule demultiplex_R2:
  input: 
    fq = R2_FQ,
    ids = '{projects}/fastq/demultiplexed/R1/{cell}_reads_ids.txt.gz',
  output:
    fq_out = '{projects}/fastq/demultiplexed/R2/{cell}.fastq.gz',
  params:
    job_name = 'demultiplex_R2.{projects}',
    memory =  "select[mem>10] rusage[mem=10] "
  shell:
    '~/src/seqtk/seqtk subseq {input.fq} {input.ids} | gzip > {output.fq_out}'
  
rule compress_fq:
  input:
    '{projects}/fastq/demultiplexed/R1/{cell}.fastq'
  output:
    '{projects}/fastq/demultiplexed/R1/{cell}.fastq.gz'
  params:
    memory = "select[mem>4] rusage[mem=4]",
    job_name= 'compressfq.{projects}'
  log:
    "{projects}/fastq/demultiplexed/logs/compress_fqs.txt"
  shell:
    "gzip  {input}"


rule extract_R1_ids:
  input:
    '{projects}/fastq/demultiplexed/R1/{cell}.fastq.gz' 
  output:
    '{projects}/fastq/demultiplexed/R1/{cell}_reads_ids.txt.gz' 
  params: 
    job_name = 'extract_R1_ids.{projects}.{cell}',
    memory = "select[mem>4] rusage[mem=4]"
  log:
    '{projects}/fastq/demultiplexed/R1/logs/{cell}.log' 
  shell:
    "python3 {BIN}/extract_read_ids.py -f {input} -o {output} 2> {log}"

subworkflow demultiplex_R1:
  workdir: "./"
  snakefile: "rules/submaster_workflow.snake"
  
rule check_demulitplex_workflow:
  input:
    demultiplex_R1('{projects}/fastq/demultiplexed/R1.done')
  output:
    touch('{projects}/fastq/demultiplexed/R1reads.done')
  params:
    memory = "select[mem>4] rusage[mem=4]",
    job_name= 'check_demultiplex_R1.{projects}',
  shell:
    " echo 'R1 done' "


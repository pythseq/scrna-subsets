
''' rules to count alignments and deduplicate umis ''' 

#rule kallisto_dedup:
#  input:
#    "{projects}/kallisto_aln/{cell}/bam/{cell}_sorted_dedup.fastq.gz",
#  output:
#    "{projects}/kallisto_aln/{cell}/dedup/abundance.tsv",
#    out_dir = "{projects}/kallisto_aln/{cell}/dedup/",
#  params:
#    job_name = '{projects}.kallisto',
#    memory =  "select[mem>4] rusage[mem=4]"
#  log:
#    "{projects}/kallisto_aln/logs/dedup_align/{cell}.txt"
#  shell:
#    " kallisto quant -i {KALLISTO_IDX} -o {output.out_dir} {input}  "
#    "  --single -l 295 -s 50  "
#    "  --fr-stranded "
#
#rule extract_dedup_reads_for_kallisto:
#  input:
#    "{projects}/kallisto_aln/{cell}/bam/{cell}_sorted_dedup.bam",
#  output:
#    "{projects}/kallisto_aln/{cell}/bam/{cell}_sorted_dedup.fastq.gz"
#  params:
#    job_name = '{projects}.kallistoifq',
#    memory =  "select[mem>4] rusage[mem=4]"
#  log:
#    "{projects}/kallisto_aln/logs/dedup_align/{cell}.txt"
#  shell:
#    """
#    lines=$(samtools view {input} | head | wc -l)
#    if [[ "$lines" -gt 0 ]]; then
#      bedtools bamtofastq -i {input} -fq /dev/stdout | gzip > {output} 
#    else
#      touch {output}
#    fi
#    """
rule featureCount_hisat_dedup: 
  input: 
    "{projects}/hisat2/{cell}/{cell}_sorted_dedup.bam"
  output:
    "{projects}/hisat2/feature_counts/{cell}_sorted_dedup.tsv"
  params:
    job_name = "{project.fCount}",
    memory = "select[mem>25] rusage[mem=25]",
  threads:
    4
  log:
    "{projects}/hisat2/feature_counts/logs/{cell}_dedup_counts.txt"
  shell:
    " featureCounts -s 1 -T {threads} -t exon -Q 10 -g gene_name -a {TRANSCRIPTS} -o {output} {input} "

rule featureCount_hisat: 
  input: 
    "{projects}/hisat2/{cell}/{cell}_sorted.bam"
  output:
    "{projects}/hisat2/feature_counts/{cell}_sorted.tsv"
  params:
    job_name = "{project.fCount}",
    memory = "select[mem>25] rusage[mem=25]",
  threads:
    4
  log:
    "{projects}/hisat2/feature_counts/logs/{cell}_sorted_counts.txt"
  shell:
    " featureCounts -s 1 -T {threads} -t exon -Q 10 -g gene_name -a {TRANSCRIPTS} -o {output} {input} "



#rule kallisto_umi_tools_dedup:
#  input:
#    bam = "{projects}/kallisto_aln/{cell}/bam/{cell}_sorted.bam",
#    idx = "{projects}/kallisto_aln/{cell}/bam/{cell}_sorted.bam.bai",
#  output:
#    "{projects}/kallisto_aln/{cell}/bam/{cell}_sorted_dedup.bam",
#  params:
#    job_name = "{project.dedup}",
#    memory = "select[mem>20] rusage[mem=20] span[hosts=1]",
#  log:  
#    "{projects}/kallisto_aln/logs/umi_dedup/{cell}"
#  shell:
#    """
#    lines=$(samtools view {input.bam} | head | wc -l)
#    if [[ "$lines" -gt 0 ]]; then
#      umi_tools dedup --method 'directional-adjacency' --output-stats {log} --log2stderr -I {input.bam} > {output} 
#    else
#      cp {input.bam} {output}
#    fi
#    """


rule hisat_umi_tools_dedup:
  input:
    bam = "{projects}/hisat2/{cell}/{cell}_sorted.bam",
    idx = "{projects}/hisat2/{cell}/{cell}_sorted.bam.bai"
  output:
    "{projects}/hisat2/{cell}/{cell}_sorted_dedup.bam"
  params:
    job_name = "{project.dedup}",
    memory = "select[mem>20] rusage[mem=20] span[hosts=1]",
  log:
    "{projects}/hisat2/logs/umi_dedup/{cell}"
  shell:
    """
    module load python

    if samtools quickcheck {input.bam} 
    then
      umi_tools dedup --method 'directional-adjacency' --output-stats {log} --log2stderr -I {input.bam} > {output} 
    else
      cp {input.bam} {output}
    fi

    module unload python
    """


 
#rule get_reads_counts:
#  input: 
#    "{projects}/hisat2/cuffnorm/sample_sheet.txt" 
#  output: 
#    "{projects}/fastq/stats/mapping_stats.txt"
#  params:
#    raw_fq = PROJECTS + "/fastq/original/" + SAMPLE + "_R1_001.fastq.gz",
#    unmatched_fq = PROJECTS + "/fastq/demultiplexed/R1/unmatched.fastq.gz",
#    job_name = "{project.stats}",
#    memory = "select[mem>50] rusage[mem=50] span[hosts=1]",
#  log:
#    "{projects}/fastq/stats/logs/counts.txt"
#  shell:
#    " ../bin/mapping_stats.sh {params.raw_fq} {params.unmatched_fq} >> {output}"
# 
#rule cuffnorm:
#  input:
#    expand("{projects}/hisat2/cuffquant/{cell}/abundances.cxb",
#    projects=PROJECTS, cell=CELL)
#
#  output:
#   table =  "{projects}/hisat2/cuffnorm/genes.attr_table",
#   sample_sheet = "{projects}/hisat2/cuffnorm/sample_sheet.txt" 
#  params:
#    input_dir = "{projects}/hisat2/cuffquant/",
#    output_dir = "{projects}/hisat2/cuffnorm/",
#    job_name = "{project.cuffquant}",
#    memory = "select[mem>150] rusage[mem=150] span[hosts=1]",
#  log:
#    "{projects}/hisat2/cuffnorm/log/cuffnorm.txt"
#  threads:
#    1
#  shell:
#    """
#    echo -e "sample_name\tgroup" > {output.sample_sheet}
#    for file in {params.input_dir}[C]*/abundances.cxb  
#    do 
#    new_name=$(dirname $file) 
#    cell_name=$(echo $new_name | cut -d "/" -f 6) 
#    echo -e $file"\t"$cell_name >> {output.sample_sheet}
#    done 
#    cuffnorm --library-type fr-secondstrand --use-sample-sheet -p {threads} -o {params.output_dir} {TRANSCRIPTS} {output.sample_sheet} 
#    """
#
#rule cufflinks:
#  input:
#    "{projects}/hisat2/{cell}/{cell}_sorted.bam"
#  output:
#    "{projects}/hisat2/cuffquant/{cell}/abundances.cxb"
#  params:
#    out_dir = "{projects}/hisat2/cuffquant/{cell}",
#    job_name = "{project.cuffquant}",
#    memory = "select[mem>25] rusage[mem=25]",
#  log:
#    "{projects}/hisat2/cuffquant/log/{cell}_quant.txt"
#  threads:
#    6
#  shell:
#    " cuffquant --library-type fr-secondstrand -p {threads} -m 295 -s 50 "
#    " {TRANSCRIPTS} {input} -o {params.out_dir} "



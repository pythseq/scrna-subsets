shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; ")

import glob
import os
from os import path

""" Snakemake pipeline to process wafergen or 10x single cell libraries """

configfile: "config_human.yaml"

DATA = config["DATA"]
PROJECTS = config["PROJECTS"]
IDS = config["IDS"]
STAR_IDX = config['STAR_IDX']
GENOME_FA = config['GENOME_FA']
BIN = "../bin"
STAR_IDX_OUT = STAR_IDX + "Genome"
TRANSCRIPTS = config["TRANSCRIPTS"]
lib_map = config["LIB_MAP"]

rule all:
  input: 
    {STAR_IDX_OUT},
    expand(DATA + '{projects}/fastq/original/fastqc/{ids}_R1_001_fastqc.zip',
      zip, ids=[IDS[path.basename(x)] for x in PROJECTS], projects=PROJECTS),
    expand(DATA + '{projects}/fastq/original/fastqc/{ids}_R2_001_fastqc.zip',
      zip, ids=[IDS[path.basename(x)] for x in PROJECTS], projects=PROJECTS),
    expand(DATA + "{projects}/star/alignments/Aligned_bc_exons.bam",
      projects=PROJECTS),
    expand(DATA + "{projects}/dgematrix/dge_matrix.txt",
      projects=PROJECTS),
    expand(DATA + "{projects}/star/alignments/Aligned_bc_exons_umigroups.bam",
      projects=PROJECTS),
    expand(DATA + "{projects}/star/alignments/Aligned_bc_exons_umigroups_sorted.bam",
      projects=PROJECTS),
    expand(DATA + "{projects}/umis/umigroups.txt.gz",
      projects=PROJECTS),
    expand(DATA + "{projects}/umis/umigroups_positions.txt.gz",
      projects=PROJECTS),

rule sort_idx_final_bam:
  """
  Sort final bam with cell barcodes, umis, and gene tags
  """
  input:
    bam = DATA + "{projects}/star/alignments/Aligned_bc_exons_umigroups.bam",
  output:
    bam = DATA + "{projects}/star/alignments/Aligned_bc_exons_umigroups_sorted.bam",
  params:
    job_name = "{projects}.umisort",
    memory = "select[mem>50] rusage[mem=50]",
  log: DATA + "{projects}/star/logs/idx_final"
  threads: 6
  resources: all_threads = 6
  shell:
    """
    samtools sort -@ 5 {input.bam} > {output.bam}
    samtools index -@ 5 {output.bam}
    """

rule extract_umi_positions:
  """ pull out all umis
  from bam and generate 
  flat file for parsing in R with positions
  
  Requires bam sorted by error corrected cell barcode
  """
  input:
    bam = DATA + "{projects}/star/alignments/Aligned_bc_exons_umigroups.bam",
  output:
    DATA + "{projects}/umis/umigroups_positions.txt.gz",
  params:
    job_name = "{projects}.umigroups",
    memory = "select[mem>50] rusage[mem=50]",
  log:
    DATA + "{projects}/umis/logs/make_groups.txt",
  resources: all_threads = 1
  shell:
    """
    {BIN}/get_molecule_position {input.bam} \
      | gzip > {output}
    """

rule extract_umis:
  """ pull out all umis
  from bam and generate 
  flat file for parsing in R
  
  Requires bam sorted by error corrected cell barcode
  """
  input:
    bam = DATA + "{projects}/star/alignments/Aligned_bc_exons_umigroups.bam",
  output:
    DATA + "{projects}/umis/umigroups.txt.gz",
  params:
    job_name = "{projects}.umigroups",
    memory = "select[mem>50] rusage[mem=50]",
  log:
    DATA + "{projects}/umis/logs/make_groups.txt",
  resources: all_threads = 1
  shell:
    """
    {BIN}/get_molecule_info {input.bam} \
      | gzip > {output}
    """


rule group_umis:
  """ umi_tools to group UMIs
  umi_tools 0.5.3
  """
  input:
    bam = DATA + "{projects}/star/alignments/Aligned_bc_exons.bam",
    bai = DATA + "{projects}/star/alignments/Aligned_bc_exons.bam.bai",
  output:
    bam = DATA + "{projects}/star/alignments/Aligned_bc_exons_umigroups.bam",
  params:
    job_name = "{projects}.umigroup",
    memory = "select[mem>100] rusage[mem=100]",
  log:
    DATA + "{projects}/star/logs/make_groups.txt",
  resources: all_threads = 1
  shell:
    """
    umi_tools group \
      --per-gene \
      --gene-tag "XT" \
      --per-cell \
      --extract-umi-method=tag \
      --umi-tag "BX" \
      --cell-tag "CN" \
      --umi-group-tag "BO" \
      -I {input.bam} \
      -L {log} \
      --output-bam \
      > {output.bam}.tmp.bam 
    
    samtools sort -t "CN" {output.bam}.tmp.bam > {output.bam}
    rm -f {output.bam}.tmp.bam
    """

rule count_umis:
  """ umi_tools to count UMIs
  umi_tools 0.5.3
  """
  input:
    bam = DATA + "{projects}/star/alignments/Aligned_bc_exons.bam",
    bai = DATA + "{projects}/star/alignments/Aligned_bc_exons.bam.bai",
  output:
    txt = DATA + "{projects}/dgematrix/dge_matrix.txt",
    summary = DATA + "{projects}/dgematrix/summary.txt",
  params:
    job_name = "{projects}.dgematrix",
    memory = "select[mem>16] rusage[mem=16]",
  log:
    DATA + "{projects}/dgematrix/logs/make_matrix.txt",
  resources: all_threads = 1
  shell:
    """
    umi_tools count \
      --per-gene \
      --gene-tag "XT" \
      --per-cell \
      --extract-umi-method=tag \
      --umi-tag "BX" \
      --cell-tag "CN" \
      --wide-format-cell-counts \
      -I {input.bam} \
      -S {output.txt} \
      -L {output.summary}
    """

def _get_fc_settings(wildcards):
  """ lookup global dictionary lib_map via sample
      wildcard and return settings for strand
  """

  id = os.path.basename(wildcards.projects)
  if id in lib_map:
     lib_attrs = lib_map[id]
     strand_settings = config[lib_attrs]["fc_params"]
  else:
     print("warning: no fc settings found for library: {}".format(id),
       file = sys.stderr)
     strand_settings = ""

  return strand_settings

rule featurecount_bam:
  """ use feature counts to associate each
  read with an exon 
  subread 1.6.0
  """
  input:
    bam = DATA + "{projects}/star/alignments/Aligned_bc.bam",
    bai = DATA + "{projects}/star/alignments/Aligned_bc.bam.bai",
  output:
    bam = DATA + "{projects}/star/alignments/Aligned_bc_exons.bam",
    bai = DATA + "{projects}/star/alignments/Aligned_bc_exons.bam.bai",
    fc_summary = DATA + "{projects}/featurecounts/assigned_genes.txt"
  params:
    settings = _get_fc_settings,
    prefix = DATA + "{projects}/featurecounts/assigned_genes.txt",
    bam = DATA + "{projects}/featurecounts/Aligned_bc.bam.featureCounts.bam",
    job_name = "{projects}.tagexons",
    memory = "select[mem>16] rusage[mem=16]",
  threads: 12
  resources: all_threads = 12
  log:
    DATA + "{projects}/featurecounts/logs/gene_overlap.txt"
  shell:
    """
    featureCounts \
      -a {TRANSCRIPTS} \
      -R BAM  \
      -T {threads} \
      -o {params.prefix} \
       {params.settings}  \
      -g "gene_name" \
      {input.bam}

    samtools sort -@ 11 {params.bam} -o {output.bam}
    samtools index {output.bam}
    rm -f {params.bam}
    """  

def _get_seq_and_umi(wildcards):
  """ lookup global dictionary lib_map via sample
      wildcard and return settings for selecting
      cell and umis from read name 
  """
  id = os.path.basename(wildcards.projects)
  if id in lib_map:
     lib_attrs = lib_map[id]
     idx_settings = config[lib_attrs]["seq_extract"]
  else:
     print("warning: no index settings found for library: {}".format(id),
       file = sys.stderr)
     idx_settings = ""

  return idx_settings
 
def _get_bcs(wildcards):
  """ lookup global dictionary lib_map via sample
      wildcard and return settings for selecting
      barcode whitelist
  """
  id = os.path.basename(wildcards.projects)
  if id in lib_map:
     lib_attrs = lib_map[id]
     bcs_settings = config[lib_attrs]["bcs"]
  else:
     print("warning: no bcs settings found for library: {}".format(id),
       file = sys.stderr)
     bcs_settings = ""

  return bcs_settings

rule barcode_bam:
  """ add cell barcode to a bam tag """
  input:
    bam = DATA + "{projects}/star/alignments/Aligned.sortedByCoord.out.bam",
    bai = DATA + "{projects}/star/alignments/Aligned.sortedByCoord.out.bam.bai",
    bcs = _get_bcs
  output:
    bam = temp(DATA + "{projects}/star/alignments/Aligned_bc.bam"),
    bai = temp(DATA + "{projects}/star/alignments/Aligned_bc.bam.bai"),
  params:
    idx = _get_seq_and_umi,
    job_name = "{projects.tagbc}",
    memory = "select[mem>80] rusage[mem=80]",
    seen_bcs = DATA + "{projects}/star/logs/seen_barcodes.txt"
  log:
    DATA + "{projects}/star/logs/tag_bc.txt"
  resources: all_threads = 1
  shell:
    """
    {BIN}/barcode_tag_bam {input.bam} {input.bcs} \
      {output.bam} {params.idx} \
      > {params.seen_bcs}
    
    samtools index {output.bam}
    """

rule star_align:
  input:
    DATA + "{projects}/fastq/modified/R2_trimmed.fastq.gz"
  output:
    bam = temp(DATA + "{projects}/star/alignments/Aligned.sortedByCoord.out.bam"),
    bai = temp(DATA + "{projects}/star/alignments/Aligned.sortedByCoord.out.bam.bai"),
  params:
    out_put = DATA + "{projects}/star/alignments/",
    job_name = "{project.star}",
    memory = "select[mem>80] rusage[mem=80]",
  log:
    DATA + "{projects}/star/logs/alignment.txt"
  threads: 12
  resources: all_threads = 12
  shell:
    """
    STAR --runThreadN {threads} --genomeDir {STAR_IDX} \
      --readFilesIn {input} --readFilesCommand gunzip -c \
      --outSAMtype BAM SortedByCoordinate --runMode alignReads \
      --outFileNamePrefix {params.out_put} \
      --outSAMmultNmax 1 --outStd Log \
      --outSAMunmapped Within
    samtools index {output.bam}
    """

rule append_r1_seq_to_R2:
  """ move R1 sequence to R2 read name and
      trim R1 sequence to 30 nucleotides

      also trim poly(A) tails from R2 using cutadapt
  """
  input:
    R1 = lambda wildcards: os.path.join(DATA, wildcards.projects,
      'fastq','original', IDS[path.basename(wildcards.projects)] + '_R1_001.fastq.gz'),
    R2 = lambda wildcards: os.path.join(DATA, wildcards.projects, 
      'fastq','original', IDS[path.basename(wildcards.projects)] + '_R2_001.fastq.gz')
  output:
    temp(DATA + '{projects}/fastq/modified/R2_trimmed.fastq.gz')
  params:
    job_name = "{projects}.renamefq",
    memory = "select[mem>8] rusage[mem=8] ",
  log:
    DATA + '{projects}/fastq/logs/rename_fq.txt'
  resources: all_threads = 3 #cutadapt uses pigz 
  threads: 3
  shell:
    """
    {BIN}/append_read_name {input.R1} {input.R2} 30 \
      2> {log} \
      | cutadapt \
        -a 'A{{100}}' \
        -O 6 \
        -m 20 \
        -q 10 \
        -o {output} - \
        >> {log}
    """

rule fastqc:
  input:
    R1 = path.join(DATA, "{projects}", "fastq", "original", "{ids}_R1_001.fastq.gz"),
    R2 = path.join(DATA, "{projects}", "fastq", "original", "{ids}_R2_001.fastq.gz"),
  output:
    path.join(DATA, "{projects}", "fastq", "original", "fastqc",
              "{ids}_R1_001_fastqc.zip"),
    path.join(DATA, "{projects}", "fastq", "original", "fastqc",
              "{ids}_R2_001_fastqc.zip")
  params:
    out_dir = path.join(DATA, "{projects}", "fastq", "original", "fastqc"),
    job_name = '{projects}.fastqc',
    memory =  "select[mem>80] rusage[mem=80] "
  log:
    path.join(DATA, "{projects}", "fastq", "original", "fastqc", "logs")
  threads:
    6
  resources: all_threads = 6
  shell:
    """ 
    mkdir -p {params.out_dir}
    fastqc -t {threads} -f fastq -o {params.out_dir} {input.R1} {input.R2} 
    """

rule star_idx:
  input:
    {GENOME_FA}
  output:
    {STAR_IDX_OUT}
  params:
    job_name = 'idx_star',
    memory =  "select[mem>80] rusage[mem=80] "
  threads:
    16
  resources: all_threads = 16
  log:
    STAR_IDX + "log.txt"
  shell:
    """
    mkdir -p {STAR_IDX}

    STAR --runThreadN {threads} \
     --genomeDir {STAR_IDX} \
     --genomeFastaFiles {input} \
     --sjdbGTFfile {TRANSCRIPTS} \
     --runMode genomeGenerate \
     --outStd Log 
    """ 

shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; ")

import glob
import os

configfile: "config_original.yaml"
  
PROJECTS = config["PROJECTS"]
IDS = config["IDS"]
BCS = config["BCS"]
STAR_IDX = config['STAR_IDX']
GENOME_FA = config['GENOME_FA']
BIN = "../bin"
STAR_IDX_OUT = STAR_IDX + "Genome"
TRANSCRIPTS = config["TRANSCRIPTS"]
TRANSCRIPTS_BED = config["TRANSCRIPTS_BED"]

CELL, = glob_wildcards(PROJECTS + "/cell_bams/Aligned_bc_umi.CN_{cell,Cell_.*}.bam")

rule all:
  input: 
    expand('{projects}/cell_bams/start_pipeline_two.txt',
    projects=PROJECTS),
    expand("{projects}/cell_bams/{cell}_sorted_dedup.bam",
    cell=CELL, projects=PROJECTS),
    expand("{projects}/feature_counts/{cell}_{dedup}.tsv",
    projects=PROJECTS, cell=CELL, dedup = ['sorted', 'sorted_dedup']),
    expand("{projects}/star/bc_counts/{alignment_cat}_bcs.txt",
    projects=PROJECTS, alignment_cat=['aligned', 'unaligned', 'all']),

rule get_bc_counts:
  input:
    "{projects}/star/alignments/Aligned_bc_umi.bam"
  output:
    all_bcs = "{projects}/star/bc_counts/all_bcs.txt",
    aligned = "{projects}/star/bc_counts/aligned_bcs.txt",
    unaligned = "{projects}/star/bc_counts/unaligned_bcs.txt",
  params:
    tmp_bam = "{projects}/star/bc_counts/tmp.bam",
    job_name = "{projects}.bcfreqs",
    memory = "select[mem>8] rusage[mem=8]",
  message:
    "extract barcode frequency tables"
  shell:
    """
    module load gcc
    {BIN}/count_bcs {input} > {output.all_bcs}
    
    samtools view -bf 4  {input} > {params.tmp_bam}

    {BIN}/count_bcs {params.tmp_bam} > {output.unaligned}
    
    samtools view -bF 4 {input} > {params.tmp_bam}

    {BIN}/count_bcs {input} > {output.aligned}
    rm {params.tmp_bam}
    module unload gcc
    """

rule featureCount:
  input:
    "{projects}/cell_bams/{cell}_{dedup}.bam"
  output:
    "{projects}/feature_counts/{cell}_{dedup}.tsv"
  params:
    job_name = "{projects}.fCount",
    memory = "select[mem>25] rusage[mem=25]",
  threads:
    4
  log:
    "{projects}/feature_counts/log/{cell}_sorted_counts.txt"
  shell:
    """
    module load subread
    featureCounts -s 1 \
     -T {threads} \
     -t exon \
     -Q 10 \
     -g gene_name \
     -a {TRANSCRIPTS} \
     -o {output} \
     {input}
    module unload subread
    """

rule dedup_bams:
  input:
    bam = "{projects}/cell_bams/{cell}_sorted.bam",
    idx = "{projects}/cell_bams/{cell}_sorted.bam.bai"
  output:
    bam = "{projects}/cell_bams/{cell}_sorted_dedup.bam",
  params:
    job_name = "{projects}.dedup",
    memory = "select[mem>20] rusage[mem=20] span[hosts=1]",
  log:
    "{projects}/cell_bams/log/umi_dedup/{cell}.txt"
  shell:
    """
    module load python
    if samtools quickcheck {input.bam}
    then
      umi_tools dedup \
        --method 'directional-adjacency' \
        --spliced-is-unique \
        --multimapping-detection-method 'NH' \
        --output-stats {log} \
        --log2stderr \
        -I {input.bam} \
        -S {output.bam}
    else
      cp {input.bam} {output.bam}
    fi
    module unload python
    """ 

rule sort_idx_bams:
  input:
    bam = "{projects}/cell_bams/Aligned_bc_umi.CN_{cell}.bam",
  output:
    bam = "{projects}/cell_bams/{cell}_sorted.bam",
    idx = "{projects}/cell_bams/{cell}_sorted.bam.bai",
  params:
    job_name = "{projects}.srtidx",
    memory = "select[mem>20] rusage[mem=20] span[hosts=1]",
  log:
    "{projects}/cell_bams/log/idx/{cell}.txt"
  shell:
    """
    samtools sort {input.bam} > {output.bam}
    samtools index {output.bam}
    """

subworkflow preprocess_bams:
  workdir: "./"
  snakefile: "scRNA.snake"
  
rule check_subworkflow:
  input:
    preprocess_bams('{projects}/cell_bams/splitting_complete.txt')
  output:
    '{projects}/cell_bams/start_pipeline_two.txt'
  params:
    memory = "select[mem>4] rusage[mem=4]",
    job_name= 'check_subworkflow.{projects}',
  shell:
    " echo 'subworkflow done' > {output}"


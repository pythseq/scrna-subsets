shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; ")

import glob
import os

''' rules to unzip and demultiplex fastqs into per cell fastq '''

configfile: "config_all.yaml"
  
PROJECTS = config["PROJECTS"]
IDS = config["IDS"]
BCS = config["BCS"]
STAR_IDX = config['STAR_IDX']
GENOME_FA = config['GENOME_FA']
BIN = "../bin"
STAR_IDX_OUT = STAR_IDX + "Genome"
TRANSCRIPTS = config["TRANSCRIPTS"]
TRANSCRIPTS_BED = config["TRANSCRIPTS_BED"]

rule all:
  input: 
    {STAR_IDX_OUT},
    expand('{projects}/fastq/original/' + BCS + '_barcode_keys.txt',
    projects=PROJECTS),
    expand('{projects}/fastq/original/fastqc/{ids}_R1_001_fastqc.zip',
    zip, ids=IDS, projects=PROJECTS),
    expand('{projects}/fastq/original/fastqc/{ids}_R2_001_fastqc.zip',
    zip, ids=IDS, projects=PROJECTS),
    expand('{projects}/fastq/modified/combined_R2_trimmed.fastq.gz',
    projects=PROJECTS),
    expand("{projects}/star/alignments/Aligned_bc_exons.bam",
    projects=PROJECTS),
    expand("{projects}/dgematrix/dge_matrix.txt",
    projects=PROJECTS),
    expand("{projects}/featurecounts/assigned_read_counts.txt",
      projects=PROJECTS)

rule count_umis:
  """ umi_tools to count UMIs
  umi_tools 0.5.3
  """
  input:
    bam = "{projects}/star/alignments/Aligned_bc_exons.bam",
    bai = "{projects}/star/alignments/Aligned_bc_exons.bam.bai",
  output:
    txt = "{projects}/dgematrix/dge_matrix.txt",
    summary = "{projects}/dgematrix/summary.txt",
  params:
    job_name = "{projects}.dgematrix",
    memory = "select[mem>16] rusage[mem=16]",
  log:
    "{projects}/dgematrix/logs/make_matrix.txt",
  resources: all_threads = 1
  shell:
    """
    /vol3/home/riemondy/.local/bin/umi_tools count \
      --per-gene \
      --gene-tag "XT" \
      --per-cell \
      --extract-umi-method=tag \
      --umi-tag "BX" \
      --cell-tag "CN" \
      --wide-format-cell-counts \
      -I {input.bam} \
      -S {output.txt} \
      -L {output.summary}
    """


rule count_reads: 
  """ use feature counts to 
  report read counts 
  subread 1.6.0
  """
  input:
    "{projects}/star/alignments/Aligned_bc.bam",
  output:
    fc_summary = "{projects}/featurecounts/assigned_read_counts.txt"
  params:
    prefix = "{projects}/featurecounts/assigned_read_counts.txt",
    job_name = "{projects}.countexons",
    memory = "select[mem>16] rusage[mem=16]",
  threads: 12
  resources: all_threads = 12
  log:
    "{projects}/featurecounts/log/read_counts.txt"
  shell:
    """
    ## add rg tags based on cell barcode (to output read counts per
    ## cell via featureCounts using the byReadGroup option
    module load python

    samtools view -h {input} \
      | sed 's/CN:Z:/RG:Z:/' \
      | samtools view -bS \
      > {input}.tmpsed 

    python {BIN}/addRGtoSAMHeader.py \
      -i {input}.tmpsed \
      -o - \
      -H \
      | samtools reheader \
      - {input}.tmpsed \
      > {input}.tmpbam
    
    rm -f {input}.tmpsed

    /vol3/home/riemondy/src/subread-1.6.0-Linux-x86_64/bin/featureCounts \
      -a {TRANSCRIPTS} \
      -T {threads} \
      -o {params.prefix} \
      -s 1 \
      -g "gene_name" \
      --byReadGroup \
      {input}.tmpbam

    rm -f {input}.tmpbam
    """  

rule featurecount_bam:
  """ use feature counts to associate each
  read with an exon 
  subread 1.6.0
  """
  input:
    bam = "{projects}/star/alignments/Aligned_bc.bam",
    bai = "{projects}/star/alignments/Aligned_bc.bam.bai",
  output:
    bam = protected("{projects}/star/alignments/Aligned_bc_exons.bam"),
    bai = protected("{projects}/star/alignments/Aligned_bc_exons.bam.bai"),
    fc_summary = "{projects}/featurecounts/assigned_genes.txt"
  params:
    prefix = "{projects}/featurecounts/assigned_genes.txt",
    bam = "{projects}/featurecounts/Aligned_bc.bam.featureCounts.bam",
    job_name = "{projects}.tagexons",
    memory = "select[mem>16] rusage[mem=16]",
  threads: 12
  resources: all_threads = 12
  log:
    "{projects}/featurecounts/log/gene_overlap.txt"
  shell:
    """

    /vol3/home/riemondy/src/subread-1.6.0-Linux-x86_64/bin/featureCounts \
      -a {TRANSCRIPTS} \
      -R BAM  \
      -T {threads} \
      -o {params.prefix} \
      -s 1 \
      -g "gene_name" \
      {input.bam}

    samtools sort -@ 11 {params.bam} -o {output.bam}
    samtools index {output.bam}
    rm -f {params.bam}
    """  

rule barcode_bam:
  """ add cell barcode to a bam tag """
  input:
    bam = "{projects}/star/alignments/Aligned.sortedByCoord.out.bam",
    bcs = "{projects}/fastq/original/" + BCS + "_barcode_keys.txt",
    bai = "{projects}/star/alignments/Aligned.sortedByCoord.out.bam.bai",
  output:
    bam = temp("{projects}/star/alignments/Aligned_bc.bam"),
    bai = temp("{projects}/star/alignments/Aligned_bc.bam.bai"),
  params:
    job_name = "{project.tagbc}",
    memory = "select[mem>80] rusage[mem=80]",
  log:
    "{projects}/star/log/tag_bc.txt"
  resources: all_threads = 1
  shell:
    """
    module load gcc
    {BIN}/barcode_tag_bam {input.bam} {input.bcs} {output.bam}
    samtools index {output.bam}
    module unload gcc
    """

rule star_align:
  input:
    "{projects}/fastq/modified/combined_R2_trimmed.fastq.gz"
  output:
    bam = temp("{projects}/star/alignments/Aligned.sortedByCoord.out.bam"),
    bai =
    temp("{projects}/star/alignments/Aligned.sortedByCoord.out.bam.bai"),
  params:
    out_put = "{projects}/star/alignments/",
    job_name = "{project.star}",
    memory = "select[mem>80] rusage[mem=80]",
  log:
    "{projects}/star/log/alignment.txt"
  threads: 12
  resources: all_threads = 12
  shell:
    """
    module load star
    STAR --runThreadN {threads} --genomeDir {STAR_IDX} \
      --readFilesIn {input} --readFilesCommand gunzip -c \
      --outSAMtype BAM SortedByCoordinate --runMode alignReads \
      --outFileNamePrefix {params.out_put} \
      --outSAMmultNmax 1 --outStd Log \
      --outSAMunmapped Within
    samtools index {output.bam}
    module unload star
    """

rule combine_fastqs:
  input:
    R2 = expand('{projects}/fastq/modified/renamed_{ids}_R2_001_trimmed.fastq.gz',
      projects=PROJECTS, ids=IDS)
  output:
    R2 =
    protected('{projects}/fastq/modified/combined_R2_trimmed.fastq.gz'),
  params:
    job_name = '{projects}.combinefq',
    memory =  "select[mem>8] rusage[mem=8] span[hosts=1]"
  log:
    '{projects}/fastq/log/combine_ids.txt'
  resources: all_threads = 1
  shell:
    """
    cat {input.R2} > {output.R2}
    """

rule cutadapt:
  input:
    '{projects}/fastq/modified/renamed_{ids}_R2_001.fastq.gz'
  output:
    temp('{projects}/fastq/modified/renamed_{ids}_R2_001_trimmed.fastq.gz')
  params:
    job_name = '{projects}_trimming',
    memory =  "select[mem>4] rusage[mem=4] "
  log:
    "{projects}/fastq/log/trimming.txt"
  resources: all_threads = 1
  shell:
    "cutadapt -a 'A{{100}}' -m 20 -q 10 -o {output} {input} > {log}"


rule append_r1_seq_to_R2:
  input:
    R1 = '{projects}/fastq/original/{ids}_R1_001.fastq.gz',
    R2 = '{projects}/fastq/original/{ids}_R2_001.fastq.gz',
  output:
    temp('{projects}/fastq/modified/renamed_{ids}_R2_001.fastq.gz')
  params:
    job_name = "{projects}.renamefq",
    memory = "select[mem>8] rusage[mem=8] span[hosts=1]"
  log:
    '{projects}/fastq/log/{ids}_rename_fq.txt'
  resources: all_threads = 1
  shell:
    """
    {BIN}/append_read_name {input.R1} {input.R2} \
      2> {log} \
      | gzip \
      > {output}
    """

rule extract_barcode_ids:
  input:
    '{projects}/fastq/original/' + BCS + '.txt'
  output:
    '{projects}/fastq/original/' + BCS + '_barcode_keys.txt'
  params:
    job_name = 'extract_barcode.{projects}',
    memory =  "select[mem>4] rusage[mem=4] span[hosts=1]"
  log:
    '{projects}/fastq/log/format_{projects}.txt'
  resources: all_threads = 1
  shell:
    """
    module load gcc
    Rscript {BIN}/format_barcodes.R {input} {output}
    """

rule fastqc:
  input:
    R1 = '{projects}/fastq/original/{ids}_R1_001.fastq.gz',
    R2 = '{projects}/fastq/original/{ids}_R2_001.fastq.gz',
  output:
    '{projects}/fastq/original/fastqc/{ids}_R1_001_fastqc.zip',
    '{projects}/fastq/original/fastqc/{ids}_R2_001_fastqc.zip'
  params:
    out_dir = '{projects}/fastq/original/fastqc/',
    job_name = '{projects}.fastqc',
    memory =  "select[mem>80] rusage[mem=80] span[hosts=1]"
  log:
    '{projects}/fastq/original/fastqc/log/'
  threads:
    6
  resources: all_threads = 6
  shell:
    """ 
    module load fastqc
    mkdir -p {params.out_dir}
    fastqc -t {threads} -f fastq -o {params.out_dir} {input.R1} {input.R2} 
    module unload fastqc fastqc
    """

rule star_idx:
  input:
    {GENOME_FA}
  output:
    {STAR_IDX_OUT}
  params:
    job_name = 'idx_star',
    memory =  "select[mem>80] rusage[mem=80] span[hosts=1]"
  threads:
    16
  resources: all_threads = 16
  log:
    STAR_IDX + "log.txt"
  shell:
    """
    module load star
    
    mkdir -p {STAR_IDX}

    STAR --runThreadN {threads} \
     --genomeDir {STAR_IDX} \
     --genomeFastaFiles {input} \
     --sjdbGTFfile {TRANSCRIPTS} \
     --runMode genomeGenerate \
     --outStd Log 

    module unload star
    """ 

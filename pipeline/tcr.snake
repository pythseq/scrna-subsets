shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; ")

import glob
import os
from os import path

""" Snakemake pipeline to preprocess VDJ libraries for use with tracer""" 

configfile: "config_tcr.yaml"

DATA = config["DATA"]
PROJECTS = config["PROJECTS"]
BCS_TO_KEEP = config["BCS_TO_KEEP"]
IDS = config["IDS"]
DBASES = config["DBASES"]
REF_FA = config["REF_FA"]

# bowtie indexes
idx_nums = [1, 2, 3, 4, "rev.1", "rev.2"]
bt_idx_path = DBASES + "tcr/bowtie_idx/tcr"
bt_idxs = bt_idx_path + ".1.bt2"

# contigs for alignment
TCR_A = config["TCRA_CONTIG"]
TCR_B = config["TCRB_CONTIG"]

"""look up barcode file to determine name of per cell fastqs/alignments"""
    
CELLS = []
with open(BCS_TO_KEEP) as f:
    for line in f:
        CELLS.append(line.strip('\n'))

rule all:
  input: 
    expand(DATA + '{projects}/fastq/modified/{read_type}_trimmed.fastq.gz',
      projects=PROJECTS, read_type = ["R1", "R2"]),
    expand(DATA + "{projects}/bowtie2/{cells}.bam",
      projects=PROJECTS, cells = CELLS),
    
CELLS = []
with open(BCS_TO_KEEP) as f:
    for line in f:
        CELLS.append(line.strip('\n'))

rule align:
  input:
    R1 = DATA + "{projects}/fastq/modified/{cell}_R1.fastq",
    R2 = DATA + "{projects}/fastq/modified/{cell}_R2.fastq",
    idx = bt_idxs
  output:
    bam = DATA + "{projects}/bowtie2/{cell}.bam",
  params:
    idx_path = bt_idx_path,
    fq = DATA + "{projects}/bowtie2/{cell}_unaligned.fastq",
    job_name = "{projects}.{cell}.align",
    memory = "select[mem>8] rusage[mem=8]",
  log:
    DATA + "{projects}/bowtie2/logs/{cell}_align.txt"
  threads: 12
  resources: all_threads = 12
  shell:
    """
      bowtie2 -p {threads} -q -X 10000 \
      --fr \
      --un-conc  {params.fq} \
      -x {params.idx_path} \
      -1 {input.R1} \
      -2 {input.R2} \
      | samtools view -bhSF4 - \
      | samtools sort - -o {output.bam}

      samtools index {output.bam}
    """

rule bowtie2_idx:
  input:
    path.join(DBASES, "tcr", "consensus_a_b_only.fasta")
  output:
    bt_idxs
  params:
    job_name = "bowtieidx",
    memory = "select[mem>4] rusage[mem=4]",
  log:
    bt_idx_path
  shell:
    """
    bowtie2-build {input} {bt_idx_path}
    """

rule extract_consensus_tcr_a_b:
  input:
    REF_FA
  output:
    path.join(DBASES, "tcr", "consensus_a_b_only.fasta")
  params:
    job_name = "extract_tcr_a_b",
    memory = "select[mem>8] rusage[mem=8]",
  log:
    path.join(DBASES, "tcr", "extract_tcr_ab.txt")
  threads: 1
  resources: all_threads = 1
  shell:
    """
    samtools faidx {input} {TCR_A} {TCR_B} > {output}
    """

 
rule split_to_cells:
  input:
    R1 = DATA + "{projects}/fastq/modified/R1_trimmed.fastq.gz",
    R2 = DATA + "{projects}/fastq/modified/R2_trimmed.fastq.gz",
  output:
    DATA + "{projects}/fastq/modified/{cell}_R1.fastq", 
    DATA + "{projects}/fastq/modified/{cell}_R2.fastq", 
  params:
    job_name = "{projects}.split",
    memory = "select[mem>8] rusage[mem=8]",
  log:
    DATA + "{projects}/fastq/logs/split.txt"
  threads: 3
  resources: all_threads = 3
  shell:
    """
    {BIN}/extract_reads {input.R1} {input.R2} {BCS_TO_KEEP}
    """

rule trim: 
  input:
    R1 = temp(DATA + '{projects}/fastq/modified/R1_renamed.fastq.gz'),
    R2 = temp(DATA + '{projects}/fastq/modified/R2_renamed.fastq.gz')
  output:
    R1 = DATA + "{projects}/fastq/modified/R1_trimmed.fastq.gz",
    R2 = DATA + "{projects}/fastq/modified/R2_trimmed.fastq.gz",
  params:
    job_name = "{projects}.trim",
    memory = "select[mem>8] rusage[mem=8]",
  log:
    DATA + "{projects}/fastq/logs/trim.txt"
  threads: 3
  resources: all_threads = 3
  shell:
    """
    # settings taken from cellranger TRIM_READS _stdout
    # see cellranger/mro/stages/vdj/trim_reads/__init__.py
    cutadapt \
      -m 18 \
      -e 0.12 \
      --times 3 \
      --overlap 5 \
      -f fastq \
      -o {output.R1} \
      -p {output.R2} \
      -g spacer=^TTTCTTATATGGG \
      -a R2_rc=AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC \
      -a P7_rc=ATCTCGTATGCCGTCTTCTGCTTG \
      -a polyA=AAAAAAAAAAAAAAAAAAAA \
      -a rt_primer=AAGCAGTGGTATCAACGCAGAGTACAT \
      -A spacer_rc=CCCATATAAGAAA \
      -A R1_rc=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT \
      -A P5_rc=AGATCTCGGTGGTCGCCGTATCATT \
      -A polyA=AAAAAAAAAAAAAAAAAAAA \
      -A rt_primer=AAGCAGTGGTATCAACGCAGAGTACAT \
      {input.R1} \
      {input.R2} 
    """

rule append_barcodes:
  """ move R1 sequence to R1 and R2 read name 
      also filter to keep cell barcodes of interest
  """
  input:
    R1 = lambda wildcards: os.path.join(DATA, wildcards.projects,
      'fastq','original', IDS[path.basename(wildcards.projects)] + '_R1_001.fastq.gz'),
    R2 = lambda wildcards: os.path.join(DATA, wildcards.projects, 
      'fastq','original', IDS[path.basename(wildcards.projects)] + '_R2_001.fastq.gz')
  output:
    R1 = temp(DATA + '{projects}/fastq/modified/R1_renamed.fastq.gz'),
    R2 = temp(DATA + '{projects}/fastq/modified/R2_renamed.fastq.gz')
  params:
    job_name = "{projects}.renamefq",
    whitelist = BCS_TO_KEEP,
    memory = "select[mem>8] rusage[mem=8] ",
  log:
    DATA + '{projects}/fastq/logs/rename_fq.txt'
  resources: all_threads = 1 
  threads: 3
  shell:
    """
    umi_tools extract \
      --bc-pattern=CCCCCCCCCCCCCCCCNNNNNNNNNN \
      --stdin {input.R1} \
      --stdout {output.R1} \
      --read2-in {input.R2} \
      --read2-out {output.R2} \
      --filter-cell-barcode \
      --whitelist {params.whitelist}  
    """
